generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider  = "postgresql"
  url       = env("DATABASE_URL")
  directUrl = env("DIRECT_URL")
}

model User {
  id               String    @id @default(cuid())
  username         String    @unique
  password         String
  name             String?
  image            String?
  // Admin/Agent Role System
  userType         String    @default("player") // 'player', 'agent', 'client_admin', 'platform_admin'
  tenantId         String?   // For multi-tenant support (client association)
  parentAgentId    String?   // For agent hierarchy
  createdBy        String?   // Which admin/agent created this user
  isActive         Boolean   @default(true)
  lastLogin        DateTime?
  loginAttempts    Int       @default(0)
  accountLockedUntil DateTime?
  createdAt        DateTime  @default(now())
  updatedAt        DateTime  @updatedAt
  account          Account?
  bets             Bet[]
  // Agent relationships
  registeredPlayers User[]  @relation("AgentPlayers")
  agent            User?    @relation("AgentPlayers", fields: [parentAgentId], references: [id])
  agentBalanceAdjustments BalanceAdjustment[] @relation("AgentAdjustments")
  playerBalanceAdjustments BalanceAdjustment[] @relation("PlayerAdjustments")
  auditLogs        AuditLog[] @relation("UserActions")
  targetAuditLogs  AuditLog[] @relation("TargetUser")

  @@index([username])
  @@index([userType])
  @@index([tenantId])
  @@index([parentAgentId])
  @@index([isActive])
  @@map("users")
}

model Account {
  userId    String  @id
  balance   Float
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  user      User    @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("accounts")
}

model Sport {
  id      String   @id
  name    String
  icon    String
  leagues League[]

  @@map("sports")
}

model League {
  id      String @id
  name    String
  sportId String
  logo    String
  games   Game[]
  sport   Sport  @relation(fields: [sportId], references: [id], onDelete: Cascade)

  @@index([sportId])
  @@map("leagues")
}

model Team {
  id        String   @id
  name      String
  shortName String
  logo      String
  record    String?
  leagueId  String?
  awayGames Game[]   @relation("AwayTeam")
  homeGames Game[]   @relation("HomeTeam")
  players   Player[]

  @@index([leagueId])
  @@map("teams")
}

model Game {
  id            String       @id
  leagueId      String
  homeTeamId    String
  awayTeamId    String
  startTime     DateTime
  status        String       @default("upcoming")
  venue         String?
  homeScore     Int?
  awayScore     Int?
  period        String?
  timeRemaining String?
  createdAt     DateTime     @default(now())
  updatedAt     DateTime     @updatedAt
  bets          Bet[]
  awayTeam      Team         @relation("AwayTeam", fields: [awayTeamId], references: [id], onDelete: Cascade)
  homeTeam      Team         @relation("HomeTeam", fields: [homeTeamId], references: [id], onDelete: Cascade)
  league        League       @relation(fields: [leagueId], references: [id], onDelete: Cascade)
  odds          Odds[]
  playerProps   PlayerProp[]
  gameProps     GameProp[]

  @@index([leagueId])
  @@index([status])
  @@index([startTime])
  @@index([leagueId, status, startTime])
  @@index([homeTeamId])
  @@index([awayTeamId])
  @@map("games")
}

model Odds {
  id          String   @id @default(cuid())
  gameId      String
  betType     String
  selection   String?
  odds        Int
  line        Float?
  lastUpdated DateTime @default(now())
  game        Game     @relation(fields: [gameId], references: [id], onDelete: Cascade)

  @@index([gameId])
  @@index([betType])
  @@index([gameId, betType])
  @@map("odds")
}

model Bet {
  id              String    @id @default(cuid())
  userId          String
  gameId          String?
  betType         String
  selection       String
  odds            Int
  line            Float?
  stake           Float
  potentialPayout Float
  status          String    @default("pending")
  placedAt        DateTime  @default(now())
  settledAt       DateTime?
  game            Game?     @relation(fields: [gameId], references: [id], onDelete: Cascade)
  user            User      @relation(fields: [userId], references: [id], onDelete: Cascade)
  legs            Json?
  teaserType      String?
  teaserMetadata  Json?
  idempotencyKey  String?   @unique

  @@index([userId])
  @@index([gameId])
  @@index([status])
  @@index([betType])
  @@index([userId, status, placedAt])
  @@map("bets")
}

model Player {
  id          String       @id
  name        String
  teamId      String
  position    String
  jerseyNumber String?
  team        Team         @relation(fields: [teamId], references: [id], onDelete: Cascade)
  playerProps PlayerProp[]

  @@index([teamId])
  @@map("players")
}

model PlayerProp {
  id          String   @id @default(cuid())
  gameId      String
  playerId    String
  statType    String
  line        Float
  overOdds    Int
  underOdds   Int
  category    String
  lastUpdated DateTime @default(now())
  game        Game     @relation(fields: [gameId], references: [id], onDelete: Cascade)
  player      Player   @relation(fields: [playerId], references: [id], onDelete: Cascade)

  @@index([gameId])
  @@index([playerId])
  @@index([gameId, playerId])
  @@map("player_props")
}

model GameProp {
  id          String   @id @default(cuid())
  gameId      String
  propType    String
  description String
  selection   String?
  odds        Int
  line        Float?
  lastUpdated DateTime @default(now())
  game        Game     @relation(fields: [gameId], references: [id], onDelete: Cascade)

  @@index([gameId])
  @@index([propType])
  @@map("game_props")
}

// Agent/Admin System Models

model BalanceAdjustment {
  id              String   @id @default(cuid())
  tenantId        String?
  playerId        String   // User being adjusted
  agentId         String   // Agent/Admin performing adjustment
  adjustmentType  String   // 'deposit', 'withdrawal', 'correction'
  amount          Float
  previousBalance Float
  newBalance      Float
  reason          String?  // Optional reason for adjustment
  ipAddress       String?
  createdAt       DateTime @default(now())
  player          User     @relation("PlayerAdjustments", fields: [playerId], references: [id], onDelete: Cascade)
  agent           User     @relation("AgentAdjustments", fields: [agentId], references: [id], onDelete: Cascade)

  @@index([playerId])
  @@index([agentId])
  @@index([tenantId])
  @@index([createdAt])
  @@map("balance_adjustments")
}

model AuditLog {
  id            String   @id @default(cuid())
  tenantId      String?
  userId        String   // Who performed the action
  actionType    String   // 'player_registered', 'balance_adjusted', 'agent_created', etc.
  targetUserId  String?  // Affected user (if applicable)
  oldValue      String?
  newValue      String?
  ipAddress     String?
  userAgent     String?
  metadata      Json?    // Additional context
  createdAt     DateTime @default(now())
  user          User     @relation("UserActions", fields: [userId], references: [id], onDelete: Cascade)
  targetUser    User?    @relation("TargetUser", fields: [targetUserId], references: [id], onDelete: SetNull)

  @@index([userId])
  @@index([targetUserId])
  @@index([tenantId])
  @@index([actionType])
  @@index([createdAt])
  @@map("audit_logs")
}

// Separate Admin Dashboard System

model AdminUser {
  id            String   @id @default(cuid())
  username      String   @unique
  password      String
  role          String   @default("admin") // 'superadmin', 'admin'
  status        String   @default("active") // 'active', 'suspended', 'inactive'
  lastLogin     DateTime?
  loginAttempts Int      @default(0)
  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt
  activityLogs  AdminActivityLog[]
  agentsCreated Agent[]

  @@index([username])
  @@index([status])
  @@index([role])
  @@map("admin_users")
}

model Agent {
  id                    String   @id @default(cuid())
  username              String   @unique
  displayName           String?
  password              String
  maxSingleAdjustment   Float    @default(1000)
  dailyAdjustmentLimit  Float    @default(5000)
  currentDailyTotal     Float    @default(0) // Track daily usage
  lastDailyReset        DateTime @default(now())
  canSuspendPlayers     Boolean  @default(true)
  commissionRate        Float?
  ipRestriction         String?
  regionAssignment      String?
  notes                 String?
  permissions           Json?    // Flexible permissions
  status                String   @default("active") // 'active', 'idle', 'suspended'
  lastLogin             DateTime?
  createdBy             String
  createdAt             DateTime @default(now())
  updatedAt             DateTime @updatedAt
  creator               AdminUser @relation(fields: [createdBy], references: [id], onDelete: Restrict)
  players               DashboardPlayer[]
  balanceAdjustmentsLog AgentBalanceLog[]

  @@index([username])
  @@index([status])
  @@index([createdBy])
  @@index([lastDailyReset])
  @@map("agents")
}

model DashboardPlayer {
  id              String   @id @default(cuid())
  username        String   @unique
  displayName     String?
  password        String
  agentId         String?
  balance         Float    @default(0)
  bettingLimits   Json?    // { maxBetAmount: 10000, maxDailyBets: 50, minBetAmount: 5 }
  status          String   @default("active") // 'active', 'suspended', 'idle'
  totalBets       Int      @default(0)
  totalWagered    Float    @default(0)
  totalWinnings   Float    @default(0)
  lastBetAt       DateTime?
  lastLogin       DateTime?
  registeredAt    DateTime @default(now())
  updatedAt       DateTime @updatedAt
  agent           Agent?   @relation(fields: [agentId], references: [id], onDelete: SetNull)
  playerBets      PlayerBet[]
  transactions    PlayerTransaction[]

  @@index([username])
  @@index([agentId])
  @@index([status])
  @@index([balance])
  @@index([lastBetAt])
  @@map("dashboard_players")
}

model PlayerBet {
  id          String   @id @default(cuid())
  playerId    String
  betType     String
  amount      Float
  odds        Float
  potentialWin Float
  status      String   @default("pending") // 'pending', 'won', 'lost', 'void'
  placedAt    DateTime @default(now())
  settledAt   DateTime?
  player      DashboardPlayer @relation(fields: [playerId], references: [id], onDelete: Cascade)

  @@index([playerId])
  @@index([status])
  @@index([placedAt])
  @@map("player_bets")
}

model PlayerTransaction {
  id          String   @id @default(cuid())
  playerId    String
  type        String   // 'deposit', 'withdrawal', 'bet_placed', 'bet_won', 'adjustment'
  amount      Float
  balanceBefore Float
  balanceAfter Float
  reason      String?
  createdAt   DateTime @default(now())
  player      DashboardPlayer @relation(fields: [playerId], references: [id], onDelete: Cascade)

  @@index([playerId])
  @@index([type])
  @@index([createdAt])
  @@map("player_transactions")
}

model AgentBalanceLog {
  id          String   @id @default(cuid())
  agentId     String
  playerId    String
  playerUsername String
  type        String   // 'deposit', 'withdrawal', 'correction'
  amount      Float
  reason      String?
  createdAt   DateTime @default(now())
  agent       Agent    @relation(fields: [agentId], references: [id], onDelete: Cascade)

  @@index([agentId])
  @@index([playerId])
  @@index([createdAt])
  @@map("agent_balance_logs")
}

model AdminActivityLog {
  id          String   @id @default(cuid())
  adminUserId String
  action      String   // 'LOGIN', 'LOGOUT', 'CREATE_AGENT', 'SUSPEND_PLAYER', etc.
  targetId    String?  // ID of affected entity
  targetType  String?  // 'agent', 'player', 'system'
  details     Json?
  ipAddress   String?
  createdAt   DateTime @default(now())
  admin       AdminUser @relation(fields: [adminUserId], references: [id], onDelete: Cascade)

  @@index([adminUserId])
  @@index([action])
  @@index([createdAt])
  @@map("admin_activity_logs")
}
