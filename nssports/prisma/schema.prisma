generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider  = "postgresql"
  url       = env("DATABASE_URL")
  directUrl = env("DIRECT_URL")
}

model User {
  id        String    @id @default(cuid())
  username  String    @unique
  password  String
  name      String?
  image     String?
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
  account   Account?
  bets      Bet[]

  @@index([username])
  @@map("users")
}

model Account {
  userId    String  @id
  balance   Float
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  user      User    @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("accounts")
}

model Sport {
  id      String   @id
  name    String
  icon    String
  leagues League[]

  @@map("sports")
}

model League {
  id      String @id
  name    String
  sportId String
  logo    String
  games   Game[]
  sport   Sport  @relation(fields: [sportId], references: [id], onDelete: Cascade)

  @@index([sportId])
  @@map("leagues")
}

model Team {
  id        String   @id
  name      String
  shortName String
  logo      String
  record    String?
  leagueId  String?
  awayGames Game[]   @relation("AwayTeam")
  homeGames Game[]   @relation("HomeTeam")
  players   Player[]

  @@index([leagueId])
  @@map("teams")
}

model Game {
  id            String       @id
  leagueId      String
  homeTeamId    String
  awayTeamId    String
  startTime     DateTime
  status        String       @default("upcoming")
  venue         String?
  homeScore     Int?
  awayScore     Int?
  period        String?
  timeRemaining String?
  createdAt     DateTime     @default(now())
  updatedAt     DateTime     @updatedAt
  bets          Bet[]
  awayTeam      Team         @relation("AwayTeam", fields: [awayTeamId], references: [id], onDelete: Cascade)
  homeTeam      Team         @relation("HomeTeam", fields: [homeTeamId], references: [id], onDelete: Cascade)
  league        League       @relation(fields: [leagueId], references: [id], onDelete: Cascade)
  odds          Odds[]
  playerProps   PlayerProp[]
  gameProps     GameProp[]

  @@index([leagueId])
  @@index([status])
  @@index([startTime])
  @@index([leagueId, status, startTime])
  @@index([homeTeamId])
  @@index([awayTeamId])
  @@map("games")
}

model Odds {
  id          String   @id @default(cuid())
  gameId      String
  betType     String
  selection   String?
  odds        Int
  line        Float?
  lastUpdated DateTime @default(now())
  game        Game     @relation(fields: [gameId], references: [id], onDelete: Cascade)

  @@index([gameId])
  @@index([betType])
  @@index([gameId, betType])
  @@map("odds")
}

model Bet {
  id              String    @id @default(cuid())
  userId          String
  gameId          String?
  betType         String
  selection       String
  odds            Int
  line            Float?
  stake           Float
  potentialPayout Float
  status          String    @default("pending")
  placedAt        DateTime  @default(now())
  settledAt       DateTime?
  game            Game?     @relation(fields: [gameId], references: [id], onDelete: Cascade)
  user            User      @relation(fields: [userId], references: [id], onDelete: Cascade)
  legs            Json?
  idempotencyKey  String?   @unique

  @@index([userId])
  @@index([gameId])
  @@index([status])
  @@index([userId, status, placedAt])
  @@map("bets")
}

model Player {
  id          String       @id
  name        String
  teamId      String
  position    String
  jerseyNumber String?
  team        Team         @relation(fields: [teamId], references: [id], onDelete: Cascade)
  playerProps PlayerProp[]

  @@index([teamId])
  @@map("players")
}

model PlayerProp {
  id          String   @id @default(cuid())
  gameId      String
  playerId    String
  statType    String
  line        Float
  overOdds    Int
  underOdds   Int
  category    String
  lastUpdated DateTime @default(now())
  game        Game     @relation(fields: [gameId], references: [id], onDelete: Cascade)
  player      Player   @relation(fields: [playerId], references: [id], onDelete: Cascade)

  @@index([gameId])
  @@index([playerId])
  @@index([gameId, playerId])
  @@map("player_props")
}

model GameProp {
  id          String   @id @default(cuid())
  gameId      String
  propType    String
  description String
  selection   String?
  odds        Int
  line        Float?
  lastUpdated DateTime @default(now())
  game        Game     @relation(fields: [gameId], references: [id], onDelete: Cascade)

  @@index([gameId])
  @@index([propType])
  @@map("game_props")
}
