generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider  = "postgresql"
  url       = env("DATABASE_URL")
  directUrl = env("DIRECT_URL")
}

model Sport {
  id      String   @id
  name    String
  icon    String
  leagues League[]

  @@map("sports")
}

model League {
  id      String @id
  name    String
  sportId String
  logo    String
  games   Game[]
  sport   Sport  @relation(fields: [sportId], references: [id], onDelete: Cascade)

  @@index([sportId])
  @@map("leagues")
}

model Team {
  id        String  @id
  name      String
  shortName String
  logo      String
  record    String?
  leagueId  String?
  awayGames Game[]  @relation("AwayTeam")
  homeGames Game[]  @relation("HomeTeam")

  @@index([leagueId])
  @@map("teams")
}

model Game {
  id            String   @id
  leagueId      String
  homeTeamId    String
  awayTeamId    String
  startTime     DateTime
  status        String   @default("upcoming")
  venue         String?
  homeScore     Int?
  awayScore     Int?
  period        String?
  timeRemaining String?
  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt
  bets          Bet[]
  awayTeam      Team     @relation("AwayTeam", fields: [awayTeamId], references: [id], onDelete: Cascade)
  homeTeam      Team     @relation("HomeTeam", fields: [homeTeamId], references: [id], onDelete: Cascade)
  league        League   @relation(fields: [leagueId], references: [id], onDelete: Cascade)
  odds          Odds[]

  @@index([leagueId])
  @@index([status])
  @@index([startTime])
  @@map("games")
}

model Odds {
  id          String   @id @default(cuid())
  gameId      String
  betType     String
  selection   String?
  odds        Int
  line        Float?
  lastUpdated DateTime @default(now())
  game        Game     @relation(fields: [gameId], references: [id], onDelete: Cascade)

  @@index([gameId])
  @@index([betType])
  @@map("odds")
}

model Bet {
  id              String    @id @default(cuid())
  userId          String?
  gameId          String?
  betType         String
  selection       String
  odds            Int
  line            Float?
  stake           Decimal   @db.Decimal(18,2)
  potentialPayout Decimal   @db.Decimal(18,2)
  status          String    @default("pending")
  placedAt        DateTime  @default(now())
  settledAt       DateTime?
  game            Game?     @relation(fields: [gameId], references: [id], onDelete: Cascade)
  legs            Json?
  idempotencyKey  String?   @unique

  @@index([userId])
  @@index([gameId])
  @@index([status])
  @@index([userId, status, placedAt])
  @@map("bets")
}

/// Account balance for a user; risk/available are derived from open bets.
model Account {
  userId    String   @id
  balance   Decimal  @db.Decimal(18,2)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@map("accounts")
}
